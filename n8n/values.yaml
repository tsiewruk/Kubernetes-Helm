n8n:
  encryption_key:

defaults:

config:
  executions:
    pruneData: "true"
    pruneDataMaxAge: 3760

secret: {}

# Typical Example of a config in combination with a secret.
# config:
#    database:
#      type: postgresdb
#      postgresdb:
#        host: 192.168.0.52
# secret:
#    database:
#      postgresdb:
#        password: 'big secret'

## ALL possible n8n Values

extraEnv: {}
# Set this if running behind a reverse proxy and the external port is different from the port n8n runs on
#   WEBHOOK_URL: "https://n8n.myhost.com/

extraEnvSecrets: {}
# for example, to reuse existing postgres authentication secrets:
#   DB_POSTGRESDB_USER:
#     name: postgres-user-auth
#     key: username
#   DB_POSTGRESDB_PASSWORD:
#     name: postgres-user-auth
#     key: password

persistence:
  enabled: false
  type: emptyDir
  accessModes:
  - ReadWriteOnce
  size: 1Gi


replicaCount: 1

deploymentStrategy:
  type: RollingUpdate
  maxSurge: "50%"
  maxUnavailable: "50%"

image:
  repository: n8nio/n8n
  pullPolicy: IfNotPresent
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations: {}

podLabels: {}

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000

securityContext: {}
# capabilities:
#   drop:
#   - ALL
# readOnlyRootFilesystem: true
#  runAsNonRoot: true
#  runAsUser: 1000

lifecycle: {}

command: []

livenessProbe:
  httpGet:
    path: /healthz
    port: http
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

readinessProbe:
  httpGet:
    path: /healthz
    port: http
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

initContainers: []

service:
  type: ClusterIP
  port: 80
  annotations: {}

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "true"
  hosts:
  - host: n8n.local
    paths: [/]
  tls:
  - secretName: n8n-tls
    hosts:
    - n8n.local
  className: ""

workerResources: {}

webhookResources: {}

resources:
  limits:
    cpu: 100m
    memory: 128Mi
  requests:
    cpu: 100m
    memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

redis:
  host:
  password:
