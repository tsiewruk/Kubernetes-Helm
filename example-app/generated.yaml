---
# Source: example-app/templates/namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: example-app
  labels:
    name: example-app
    helm.sh/chart: example-app-0.1.0
    app.kubernetes.io/name: example-app
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    environment: development
    team: platform
---
# Source: example-app/templates/networkpolicy.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: release-name-example-app
  namespace: example-app
  labels:
    helm.sh/chart: example-app-0.1.0
    app.kubernetes.io/name: example-app
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    environment: development
    team: platform
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: example-app
      app.kubernetes.io/instance: release-name
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: kube-system
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
  - from:
    - ipBlock:
        cidr: 10.0.0.0/8
---
# Source: example-app/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: example-app-sa
  namespace: example-app
  labels:
    helm.sh/chart: example-app-0.1.0
    app.kubernetes.io/name: example-app
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    environment: development
    team: platform
---
# Source: example-app/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-example-app-secret
  namespace: example-app
  labels:
    helm.sh/chart: example-app-0.1.0
    app.kubernetes.io/name: example-app
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    environment: development
    team: platform
  annotations:
    description: Example application secrets
type: Opaque
data:
  DB_PASSWORD: cGFzc3dvcmQ=
  JWT_SECRET: bXlqd3RzZWNyZXQ=
  REDIS_PASSWORD: cmVkaXNwYXNz
stringData:
  API_KEY: "example-api-key-12345"
  ENCRYPTION_KEY: "my-encryption-key-67890"
  WEBHOOK_SECRET: "webhook-secret-abcdef"
---
# Source: example-app/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-example-app-configmap
  namespace: example-app
  labels:
    helm.sh/chart: example-app-0.1.0
    app.kubernetes.io/name: example-app
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    environment: development
    team: platform
  annotations:
    description: Example application configuration
data:
  API_TIMEOUT: "30"
  APP_NAME: "example-app"
  APP_VERSION: "1.21.0"
  CACHE_TTL: "3600"
  DB_HOST: "postgresql.example-app.svc.cluster.local"
  DB_NAME: "example_app"
  DB_PORT: "5432"
  DEBUG_MODE: "false"
  FEATURE_CACHING: "true"
  FEATURE_LOGGING: "true"
  FEATURE_METRICS: "true"
  LOG_LEVEL: "info"
  MAX_CONNECTIONS: "100"
  REDIS_DB: "0"
  REDIS_HOST: "redis.example-app.svc.cluster.local"
  REDIS_PORT: "6379"
  WORKER_PROCESSES: "4"
---
# Source: example-app/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: release-name-example-app-pvc
  namespace: example-app
  labels:
    helm.sh/chart: example-app-0.1.0
    app.kubernetes.io/name: example-app
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    environment: development
    team: platform
  annotations:
    longhorn.io/migratable: "true"
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: longhorn
  resources:
    requests:
      storage: 10Gi
---
# Source: example-app/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-example-app
  namespace: example-app
  labels:
    helm.sh/chart: example-app-0.1.0
    app.kubernetes.io/name: example-app
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    environment: development
    team: platform
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: example-app
    app.kubernetes.io/instance: release-name
---
# Source: example-app/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-example-app
  namespace: example-app
  labels:
    helm.sh/chart: example-app-0.1.0
    app.kubernetes.io/name: example-app
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    environment: development
    team: platform
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: example-app
      app.kubernetes.io/instance: release-name
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  template:
    metadata:
      labels:
        helm.sh/chart: example-app-0.1.0
        app.kubernetes.io/name: example-app
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: "1.0"
        app.kubernetes.io/managed-by: Helm
        environment: development
        team: platform
    spec:
      serviceAccountName: example-app-sa
      securityContext:
        fsGroup: 2000
        runAsGroup: 3000
        runAsNonRoot: true
        runAsUser: 1000
      initContainers:
        - args:
          - |
            echo "Setting up permissions and directories..."
            mkdir -p /shared/logs /shared/cache /app/data/logs /app/data/uploads /app/data/cache
            chmod 755 /shared/logs /shared/cache /app/data/logs /app/data/uploads /app/data/cache
            echo "Persistent storage initialized successfully"
            echo "Init container completed successfully"
          command:
          - sh
          - -c
          image: busybox:1.35
          name: init-permissions
          volumeMounts:
          - mountPath: /shared
            name: shared-data
          - mountPath: /app/data
            name: app-data
        - args:
          - |
            echo "Waiting for database to be ready..."
            until nc -z postgres-service 5432; do
              echo "Database not ready, waiting..."
              sleep 2
            done
            echo "Database is ready!"
          command:
          - sh
          - -c
          image: busybox:1.35
          name: wait-for-db
      containers:
        - name: example-app
          image: "nginx:1.21"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          livenessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          resources:
            limits:
              cpu: 200m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
          env:
            - name: APP_ENV
              value: "development"
            - name: PORT
              value: "80"
            - name: APP_NAME
              valueFrom:
                configMapKeyRef:
                  key: APP_NAME
                  name: example-app-configmap
            - name: APP_VERSION
              valueFrom:
                configMapKeyRef:
                  key: APP_VERSION
                  name: example-app-configmap
            - name: LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  key: LOG_LEVEL
                  name: example-app-configmap
            - name: DEBUG_MODE
              valueFrom:
                configMapKeyRef:
                  key: DEBUG_MODE
                  name: example-app-configmap
            - name: DB_HOST
              valueFrom:
                configMapKeyRef:
                  key: DB_HOST
                  name: example-app-configmap
            - name: DB_PORT
              valueFrom:
                configMapKeyRef:
                  key: DB_PORT
                  name: example-app-configmap
            - name: DB_NAME
              valueFrom:
                configMapKeyRef:
                  key: DB_NAME
                  name: example-app-configmap
            - name: REDIS_HOST
              valueFrom:
                configMapKeyRef:
                  key: REDIS_HOST
                  name: example-app-configmap
            - name: REDIS_PORT
              valueFrom:
                configMapKeyRef:
                  key: REDIS_PORT
                  name: example-app-configmap
            - name: REDIS_DB
              valueFrom:
                configMapKeyRef:
                  key: REDIS_DB
                  name: example-app-configmap
            - name: WORKER_PROCESSES
              valueFrom:
                configMapKeyRef:
                  key: WORKER_PROCESSES
                  name: example-app-configmap
            - name: MAX_CONNECTIONS
              valueFrom:
                configMapKeyRef:
                  key: MAX_CONNECTIONS
                  name: example-app-configmap
            - name: CACHE_TTL
              valueFrom:
                configMapKeyRef:
                  key: CACHE_TTL
                  name: example-app-configmap
            - name: API_TIMEOUT
              valueFrom:
                configMapKeyRef:
                  key: API_TIMEOUT
                  name: example-app-configmap
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: DB_PASSWORD
                  name: example-app-secret
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: REDIS_PASSWORD
                  name: example-app-secret
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  key: JWT_SECRET
                  name: example-app-secret
            - name: API_KEY
              valueFrom:
                secretKeyRef:
                  key: API_KEY
                  name: example-app-secret
            - name: ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  key: ENCRYPTION_KEY
                  name: example-app-secret
            - name: WEBHOOK_SECRET
              valueFrom:
                secretKeyRef:
                  key: WEBHOOK_SECRET
                  name: example-app-secret
            - name: DATA_DIR
              value: "/app/data"
            - name: LOG_DIR
              value: "/app/data/logs"
            - name: UPLOAD_DIR
              value: "/app/data/uploads"
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          volumeMounts:
            - name: app-data
              mountPath: /app/data
            - name: shared-data
              mountPath: /shared
            - name: nginx-config
              mountPath: /etc/nginx/conf.d
              readOnly: true
            - name: app-data
              mountPath: /app/logs
              subPath: logs
        - name: log-shipper
          image: fluent/fluent-bit:2.1.10
          ports:
            - containerPort: 2020
              name: http
          env:
            - name: FLUENT_CONF
              value: fluent-bit.conf
            - name: FLUENT_OPT
              value: ""
          volumeMounts:
            - mountPath: /shared
              name: shared-data
            - mountPath: /app/data
              name: app-data
              readOnly: true
            - mountPath: /fluent-bit/etc
              name: fluent-bit-config
        - name: metrics-exporter
          image: prom/node-exporter:v1.6.1
          ports:
            - containerPort: 9100
              name: metrics
          volumeMounts:
            - mountPath: /host/proc
              name: proc
              readOnly: true
            - mountPath: /host/sys
              name: sys
              readOnly: true
      volumes:
        - name: app-data
          persistentVolumeClaim:
            claimName: release-name-example-app-pvc
        - emptyDir: {}
          name: shared-data
        - configMap:
            defaultMode: 420
            name: fluent-bit-config
          name: fluent-bit-config
        - hostPath:
            path: /proc
            type: Directory
          name: proc
        - hostPath:
            path: /sys
            type: Directory
          name: sys
        - configMap:
            items:
            - key: nginx.conf
              path: nginx.conf
            name: nginx-config
          name: nginx-config
---
# Source: example-app/templates/hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: release-name-example-app
  namespace: example-app
  labels:
    helm.sh/chart: example-app-0.1.0
    app.kubernetes.io/name: example-app
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    environment: development
    team: platform
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: release-name-example-app
  minReplicas: 2
  maxReplicas: 5
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
---
# Source: example-app/templates/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: release-name-example-app-job
  namespace: example-app
  labels:
    helm.sh/chart: example-app-0.1.0
    app.kubernetes.io/name: example-app
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    environment: development
    team: platform
spec:
  backoffLimit: 3
  ttlSecondsAfterFinished: 300
  template:
    spec:
      restartPolicy: Never
      securityContext:
        runAsGroup: 3000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
        - name: example-app-job
          image: "busybox:1.35"
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh"]
          args: ["-c","echo 'Job executed successfully'; sleep 10"]
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 50m
              memory: 64Mi
---
# Source: example-app/templates/cronjob.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: release-name-example-app-cronjob
  namespace: example-app
  labels:
    helm.sh/chart: example-app-0.1.0
    app.kubernetes.io/name: example-app
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    environment: development
    team: platform
spec:
  schedule: "*/5 * * * *"
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
  concurrencyPolicy: Forbid
  startingDeadlineSeconds: 60
  jobTemplate:
    spec:
      template:
        spec:
          securityContext:
            runAsGroup: 3000
            runAsNonRoot: true
            runAsUser: 1000
          restartPolicy: OnFailure
          containers:
            - name: example-app-cronjob
              image: "busybox:1.35"
              imagePullPolicy: IfNotPresent
              command: ["/bin/sh"]
              args: ["-c","echo 'CronJob executed at $(date)'; sleep 5"]
              resources:
                limits:
                  cpu: 100m
                  memory: 128Mi
                requests:
                  cpu: 50m
                  memory: 64Mi
---
# Source: example-app/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-example-app
  namespace: example-app
  labels:
    helm.sh/chart: example-app-0.1.0
    app.kubernetes.io/name: example-app
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    environment: development
    team: platform
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  ingressClassName: nginx
  rules:
    - host: "example-app.local"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: release-name-example-app
                port:
                  number: 80
