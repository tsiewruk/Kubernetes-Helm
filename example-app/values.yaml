# =============================================================================
# EXAMPLE APPLICATION VALUES - COMPLETE CONFIGURATION
# =============================================================================
# This file contains comprehensive configuration for the example application
# using all available options from the common Kubernetes library chart.
# =============================================================================

# =============================================================================
# BASIC APPLICATION CONFIGURATION
# =============================================================================

# Default namespace for the application
namespace: example-app

# Number of pod replicas
replicaCount: 3

# Additional labels to apply to all resources
labels:
  environment: development
  team: platform

# Name overrides
nameOverride: ""
fullnameOverride: ""

# =============================================================================
# CONTAINER IMAGE CONFIGURATION
# =============================================================================

# Container image settings
image:
  repository: nginx
  tag: "1.21"
  pullPolicy: IfNotPresent

# Container port configuration
containerPort: 80

# =============================================================================
# DEPLOYMENT STRATEGY
# =============================================================================

# Deployment update strategy
strategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 25%
    maxUnavailable: 25%

# =============================================================================
# POD CONFIGURATION
# =============================================================================

# Pod annotations
podAnnotations: {}

# Pod labels
podLabels: {}

# =============================================================================
# INIT CONTAINERS
# =============================================================================

# Init containers configuration
initContainers:
  enabled: true
  containers:
    - name: init-permissions
      image: busybox:1.35
      command: ["sh", "-c"]
      args: 
        - |
          echo "Setting up permissions and directories..."
          mkdir -p /shared/logs /shared/cache /app/data/logs /app/data/uploads /app/data/cache
          chmod 755 /shared/logs /shared/cache /app/data/logs /app/data/uploads /app/data/cache
          echo "Persistent storage initialized successfully"
          echo "Init container completed successfully"
      volumeMounts:
        - name: shared-data
          mountPath: /shared
        - name: app-data
          mountPath: /app/data
    - name: wait-for-db
      image: busybox:1.35
      command: ["sh", "-c"]
      args:
        - |
          echo "Waiting for database to be ready..."
          until nc -z postgres-service 5432; do
            echo "Database not ready, waiting..."
            sleep 2
          done
          echo "Database is ready!"

# =============================================================================
# SIDECAR CONTAINERS
# =============================================================================

# Sidecar containers configuration
sidecars:
  enabled: true
  containers:
    - name: log-shipper
      image: fluent/fluent-bit:2.1.10
      ports:
        - containerPort: 2020
          name: http
      env:
        - name: FLUENT_CONF
          value: fluent-bit.conf
        - name: FLUENT_OPT
          value: ""
      volumeMounts:
        - name: shared-data
          mountPath: /shared
        - name: app-data
          mountPath: /app/data
          readOnly: true
        - name: fluent-bit-config
          mountPath: /fluent-bit/etc
      resources:
        requests:
          cpu: "50m"
          memory: "64Mi"
        limits:
          cpu: "100m"
          memory: "128Mi"
    - name: metrics-exporter
      image: prom/node-exporter:v1.6.1
      ports:
        - containerPort: 9100
          name: metrics
      args:
        - --path.rootfs=/host
        - --collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)
      volumeMounts:
        - name: proc
          mountPath: /host/proc
          readOnly: true
        - name: sys
          mountPath: /host/sys
          readOnly: true
      resources:
        requests:
          cpu: "25m"
          memory: "32Mi"
        limits:
          cpu: "50m"
          memory: "64Mi"

# =============================================================================
# ENVIRONMENT VARIABLES
# =============================================================================

# Environment variables for the container
env:
  # Static values
  - name: APP_ENV
    value: "development"
  - name: PORT
    value: "80"
  
  # Values from ConfigMap
  - name: APP_NAME
    valueFrom:
      configMapKeyRef:
        name: example-app-configmap
        key: APP_NAME
  - name: APP_VERSION
    valueFrom:
      configMapKeyRef:
        name: example-app-configmap
        key: APP_VERSION
  - name: LOG_LEVEL
    valueFrom:
      configMapKeyRef:
        name: example-app-configmap
        key: LOG_LEVEL
  - name: DEBUG_MODE
    valueFrom:
      configMapKeyRef:
        name: example-app-configmap
        key: DEBUG_MODE
  - name: DB_HOST
    valueFrom:
      configMapKeyRef:
        name: example-app-configmap
        key: DB_HOST
  - name: DB_PORT
    valueFrom:
      configMapKeyRef:
        name: example-app-configmap
        key: DB_PORT
  - name: DB_NAME
    valueFrom:
      configMapKeyRef:
        name: example-app-configmap
        key: DB_NAME
  - name: REDIS_HOST
    valueFrom:
      configMapKeyRef:
        name: example-app-configmap
        key: REDIS_HOST
  - name: REDIS_PORT
    valueFrom:
      configMapKeyRef:
        name: example-app-configmap
        key: REDIS_PORT
  - name: REDIS_DB
    valueFrom:
      configMapKeyRef:
        name: example-app-configmap
        key: REDIS_DB
  - name: WORKER_PROCESSES
    valueFrom:
      configMapKeyRef:
        name: example-app-configmap
        key: WORKER_PROCESSES
  - name: MAX_CONNECTIONS
    valueFrom:
      configMapKeyRef:
        name: example-app-configmap
        key: MAX_CONNECTIONS
  - name: CACHE_TTL
    valueFrom:
      configMapKeyRef:
        name: example-app-configmap
        key: CACHE_TTL
  - name: API_TIMEOUT
    valueFrom:
      configMapKeyRef:
        name: example-app-configmap
        key: API_TIMEOUT
  
  # Values from Secret
  - name: DB_PASSWORD
    valueFrom:
      secretKeyRef:
        name: example-app-secret
        key: DB_PASSWORD
  - name: REDIS_PASSWORD
    valueFrom:
      secretKeyRef:
        name: example-app-secret
        key: REDIS_PASSWORD
  - name: JWT_SECRET
    valueFrom:
      secretKeyRef:
        name: example-app-secret
        key: JWT_SECRET
  - name: API_KEY
    valueFrom:
      secretKeyRef:
        name: example-app-secret
        key: API_KEY
  - name: ENCRYPTION_KEY
    valueFrom:
      secretKeyRef:
        name: example-app-secret
        key: ENCRYPTION_KEY
  - name: WEBHOOK_SECRET
    valueFrom:
      secretKeyRef:
        name: example-app-secret
        key: WEBHOOK_SECRET
  
  # Persistent storage paths
  - name: DATA_DIR
    value: "/app/data"
  - name: LOG_DIR
    value: "/app/data/logs"
  - name: UPLOAD_DIR
    value: "/app/data/uploads"
  
  # Kubernetes metadata
  - name: NODE_NAME
    valueFrom:
      fieldRef:
        fieldPath: spec.nodeName
  - name: POD_NAME
    valueFrom:
      fieldRef:
        fieldPath: metadata.name
  - name: POD_NAMESPACE
    valueFrom:
      fieldRef:
        fieldPath: metadata.namespace
  - name: POD_IP
    valueFrom:
      fieldRef:
        fieldPath: status.podIP

# =============================================================================
# HEALTH CHECKS
# =============================================================================

# Liveness probe configuration
livenessProbe:
  enabled: true
  path: /
  port: 80
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

# Readiness probe configuration
readinessProbe:
  enabled: true
  path: /
  port: 80
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

# =============================================================================
# RESOURCE MANAGEMENT
# =============================================================================

# Resource requests and limits
resources:
  requests:
    cpu: "100m"
    memory: "128Mi"
  limits:
    cpu: "200m"
    memory: "256Mi"

# =============================================================================
# SERVICE CONFIGURATION
# =============================================================================

# Kubernetes Service configuration
service:
  enabled: true
  type: ClusterIP
  port: 80
  targetPort: 80
  nodePort: null  # Only used if type is NodePort

# =============================================================================
# INGRESS CONFIGURATION
# =============================================================================

# Ingress configuration for external access
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
  hosts:
    - host: example-app.local
      paths:
        - path: /
          pathType: Prefix
  tls: []

# =============================================================================
# NETWORK POLICY
# =============================================================================

# Network policy for pod-to-pod communication control
networkPolicy:
  enabled: true
  podSelector: {}
  ingress:
    fromNamespaces:
      - kube-system
      - ingress-nginx
    fromCIDRs:
      - 10.0.0.0/8
  egress:
    enabled: false
    toCIDRs: []

# =============================================================================
# SECURITY CONTEXT
# =============================================================================

# Security context configuration
securityContext:
  enabled: true
  pod:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 3000
    fsGroup: 2000
  container:
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop:
        - ALL

# =============================================================================
# SERVICE ACCOUNT
# =============================================================================

# Service account configuration
serviceAccount:
  create: true
  name: example-app-sa

# =============================================================================
# VOLUMES AND STORAGE
# =============================================================================

# Persistent volumes configuration
persistentVolumes:
  enabled: true
  claim:
    name: ""  # Auto-generate: example-app-pvc
    storageClassName: "longhorn"
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: 10Gi
    annotations:
      longhorn.io/migratable: "true"
    selector: {}
    volumeName: ""
  mount:
    name: app-data
    mountPath: /app/data
    readOnly: false

# Generic volumes configuration (ConfigMaps, Secrets, EmptyDir)
volumes:
  enabled: true
  definitions:
    - name: shared-data
      emptyDir: {}
    - name: fluent-bit-config
      configMap:
        name: fluent-bit-config
        defaultMode: 0644
    - name: proc
      hostPath:
        path: /proc
        type: Directory
    - name: sys
      hostPath:
        path: /sys
        type: Directory
    - name: nginx-config
      configMap:
        name: nginx-config
        items:
          - key: nginx.conf
            path: nginx.conf
  mounts:
    - name: shared-data
      mountPath: /shared
    - name: nginx-config
      mountPath: /etc/nginx/conf.d
      readOnly: true
    - name: app-data
      mountPath: /app/logs
      subPath: logs

# =============================================================================
# POD SCHEDULING
# =============================================================================

# Pod affinity configuration
affinity:
  podAffinity:
    enabled: false
    requiredDuringSchedulingIgnoredDuringExecution: []
    preferredDuringSchedulingIgnoredDuringExecution: []
  nodeAffinity:
    enabled: false
    requiredDuringSchedulingIgnoredDuringExecution: []
    preferredDuringSchedulingIgnoredDuringExecution: []

# =============================================================================
# HORIZONTAL POD AUTOSCALER
# =============================================================================

# Horizontal Pod Autoscaler configuration
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 5
  cpu:
    enabled: true
    averageUtilization: 70
  memory:
    enabled: false
    averageUtilization: 80

# =============================================================================
# JOB CONFIGURATION
# =============================================================================

# Kubernetes Job configuration for one-time tasks
job:
  enabled: true
  image:
    repository: busybox
    tag: "1.35"
    pullPolicy: IfNotPresent
  command: ["/bin/sh"]
  args: ["-c", "echo 'Job executed successfully'; sleep 10"]
  backoffLimit: 3
  restartPolicy: Never
  ttlSecondsAfterFinished: 300
  resources:
    requests:
      cpu: "50m"
      memory: "64Mi"
    limits:
      cpu: "100m"
      memory: "128Mi"
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 3000

# =============================================================================
# CRONJOB CONFIGURATION
# =============================================================================

# Kubernetes CronJob configuration for scheduled tasks
cronjob:
  enabled: true
  schedule: "*/5 * * * *"  # Every 5 minutes
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
  concurrencyPolicy: Forbid  # Options: Allow, Forbid, Replace
  startingDeadlineSeconds: 60
  image:
    repository: busybox
    tag: "1.35"
    pullPolicy: IfNotPresent
  command: ["/bin/sh"]
  args: ["-c", "echo 'CronJob executed at $(date)'; sleep 5"]
  resources:
    requests:
      cpu: "50m"
      memory: "64Mi"
    limits:
      cpu: "100m"
      memory: "128Mi"
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 3000

# =============================================================================
# CONFIGMAP CONFIGURATION
# =============================================================================

# ConfigMap for application configuration
configMap:
  enabled: true
  name: ""  # Auto-generate: example-app-configmap
  annotations:
    description: "Example application configuration"
  data:
    # Application settings
    APP_NAME: "example-app"
    APP_VERSION: "1.21.0"
    LOG_LEVEL: "info"
    DEBUG_MODE: "false"
    
    # Database configuration
    DB_HOST: "postgresql.example-app.svc.cluster.local"
    DB_PORT: "5432"
    DB_NAME: "example_app"
    
    # Redis configuration
    REDIS_HOST: "redis.example-app.svc.cluster.local"
    REDIS_PORT: "6379"
    REDIS_DB: "0"
    
    # Feature flags
    FEATURE_METRICS: "true"
    FEATURE_LOGGING: "true"
    FEATURE_CACHING: "true"
    
    # Performance settings
    WORKER_PROCESSES: "4"
    MAX_CONNECTIONS: "100"
    CACHE_TTL: "3600"
    API_TIMEOUT: "30"

# =============================================================================
# SECRET CONFIGURATION
# =============================================================================

# Secret for sensitive application data
secret:
  enabled: true
  name: ""  # Auto-generate: example-app-secret
  type: Opaque
  annotations:
    description: "Example application secrets"
  data:
    # Base64 encoded secrets (use: echo -n "password" | base64)
    DB_PASSWORD: "cGFzc3dvcmQ="  # password
    REDIS_PASSWORD: "cmVkaXNwYXNz"  # redispass
    JWT_SECRET: "bXlqd3RzZWNyZXQ="  # myjwtsecret
  stringData:
    # Plain text secrets (will be base64 encoded automatically)
    API_KEY: "example-api-key-12345"
    ENCRYPTION_KEY: "my-encryption-key-67890"
    WEBHOOK_SECRET: "webhook-secret-abcdef"

# =============================================================================
# END OF CONFIGURATION
# =============================================================================